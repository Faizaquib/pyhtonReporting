{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:73: DeprecationWarning: Call to deprecated function get_sheet_by_name (Use wb[sheetname]).\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:41: DeprecationWarning: Call to deprecated function get_sheet_by_name (Use wb[sheetname]).\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:66: DeprecationWarning: Call to deprecated function get_sheet_by_name (Use wb[sheetname]).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Excel Two updated!\n",
      "Excel Two updated!\n",
      "Excel Two updated!\n",
      "Excel Two updated!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:142: DeprecationWarning: Call to deprecated function get_sheet_by_name (Use wb[sheetname]).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Excel Two updated!\n",
      "Excel Two updated!\n",
      "Excel Two updated!\n",
      "Excel Two updated!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:176: DeprecationWarning: Call to deprecated function get_sheet_by_name (Use wb[sheetname]).\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "import openpyxl\n",
    "import fnmatch\n",
    "import os\n",
    "import tkinter as tk\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "from matplotlib.figure import Figure\n",
    "\n",
    "\n",
    "def countDailyFile(day,processName,Month):\n",
    "    if processName == 'RTB':\n",
    "        path = 'C:\\\\Users\\\\aquibf632\\\\Desktop\\\\RTB'\n",
    "    elif processName == 'VAT':\n",
    "        path = 'C:\\\\Users\\\\aquibf632\\\\Desktop\\\\VAT'\n",
    "    elif processName == 'WAF':\n",
    "        path = 'C:\\\\Users\\\\aquibf632\\\\Desktop\\\\WAF'\n",
    "    elif processName =='AutoOnboarding':\n",
    "        path = 'C:\\\\Users\\\\aquibf632\\\\Desktop\\\\AutoOnboarding'\n",
    "    \n",
    "    if Month == 'november':\n",
    "        month = 11\n",
    "    elif Month == 'december':\n",
    "        month = 12\n",
    "    \n",
    "    listOfFiles = fnmatch.filter(os.listdir(path),\"*.txt\")\n",
    "    count = 0\n",
    "    for file in listOfFiles:\n",
    "        currentDate = str(day)+'-'+str(month)+'-'+str(datetime.now().year)\n",
    "        fileCreationDate = datetime.date(datetime.fromtimestamp(os.stat(path+\"\\\\\"+file).st_mtime)).strftime(\"%d-%m-%Y\")\n",
    "        #iterator = iterator + 1 \n",
    "        if currentDate == fileCreationDate : \n",
    "                count = count + 1 \n",
    "    return count\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def updateExcelTwo(processName,Month):\n",
    "    wb = openpyxl.load_workbook(\"C:\\\\Users\\\\aquibf632\\\\Desktop\\\\genesisTwo\\\\\"+Month+\"\\\\\"+processName+\".xlsx\")\n",
    "    sheet = wb.get_sheet_by_name(\"Sheet1\") \n",
    "    lastDay = str(sheet.cell(row=sheet.max_row,column=3).value)\n",
    "    currentDay = str(datetime.now().day)\n",
    "    lastRow = sheet.max_row\n",
    "    if (lastDay < currentDay):\n",
    "        for i in range(int(lastDay)+1,int(currentDay)+1):\n",
    "            lastRow = lastRow + 1\n",
    "            sheet.cell(row=lastRow,column=1).value = datetime.now().year\n",
    "            sheet.cell(row=lastRow,column=2).value = datetime.now().month\n",
    "            sheet.cell(row=lastRow,column=3).value = i\n",
    "            sheet.cell(row=lastRow,column=4).value = countDailyFile(i,processName,Month)\n",
    "            wb.save(\"C:\\\\Users\\\\aquibf632\\\\Desktop\\\\genesisTwo\\\\\"+Month+\"\\\\\"+processName+\".xlsx\")\n",
    "    else:\n",
    "        sheet.cell(row=lastRow,column=1).value = datetime.now().year\n",
    "        sheet.cell(row=lastRow,column=2).value = datetime.now().month\n",
    "        sheet.cell(row=lastRow,column=3).value = currentDay\n",
    "        sheet.cell(row=lastRow,column=4).value = countDailyFile(currentDay,processName,Month)\n",
    "        wb.save(\"C:\\\\Users\\\\aquibf632\\\\Desktop\\\\genesisTwo\\\\\"+Month+\"\\\\\"+processName+\".xlsx\")\n",
    "\n",
    "\n",
    "\n",
    "def totalIteration(processName,Month):\n",
    "    updateExcelTwo(processName,Month)\n",
    "    totalIteration = 0\n",
    "    wb = openpyxl.load_workbook(\"C:\\\\Users\\\\aquibf632\\\\Desktop\\\\genesisTwo\\\\\"+Month+\"\\\\\"+processName+\".xlsx\")\n",
    "    sheet = wb.get_sheet_by_name(\"Sheet1\")\n",
    "    for i in range(2,sheet.max_row+1):\n",
    "        totalIteration = totalIteration + sheet.cell(row=i,column=4).value\n",
    "    return totalIteration\n",
    "\n",
    "def updateExcelOne(processName,Month):\n",
    "    wb = openpyxl.load_workbook(\"C:\\\\Users\\\\aquibf632\\\\Desktop\\\\genesisOne\\\\\"+Month+\".xlsx\")\n",
    "    sheet = wb.get_sheet_by_name(\"Sheet1\")\n",
    "    for i in range(2,sheet.max_row+1):\n",
    "        if(sheet.cell(row=i,column=1).value == processName):\n",
    "            sheet.cell(row=i,column=2).value = totalIteration(processName,Month)\n",
    "            wb.save(\"C:\\\\Users\\\\aquibf632\\\\Desktop\\\\genesisOne\\\\\"+Month+\".xlsx\")\n",
    "            print('Excel Two updated!')\n",
    "                    \n",
    "#updateExcelOne('RTB','december')\n",
    "\n",
    "LARGE_FONT= (\"Verdana\", 12)\n",
    "\n",
    "\n",
    "class SeaofBTCapp(tk.Tk):\n",
    "\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        \n",
    "        tk.Tk.__init__(self, *args, **kwargs)\n",
    "        container = tk.Frame(self)\n",
    "\n",
    "        container.pack(side=\"top\", fill=\"both\", expand = True)\n",
    "\n",
    "        container.grid_rowconfigure(0, weight=1)\n",
    "        container.grid_columnconfigure(0, weight=1)\n",
    "\n",
    "        self.frames = {}\n",
    "\n",
    "        for F in (StartPage, PageOne, PageTwo):\n",
    "\n",
    "            frame = F(container, self)\n",
    "\n",
    "            self.frames[F] = frame\n",
    "\n",
    "            frame.grid(row=0, column=0, sticky=\"nsew\")\n",
    "\n",
    "        self.show_frame(StartPage)\n",
    "\n",
    "    def show_frame(self, cont):\n",
    "\n",
    "        frame = self.frames[cont]\n",
    "        frame.tkraise()\n",
    "\n",
    "        \n",
    "class StartPage(tk.Frame):\n",
    "\n",
    "    def __init__(self, parent, controller):\n",
    "        tk.Frame.__init__(self,parent)\n",
    "        label = tk.Label(self, text=\"Hey There!\", font=LARGE_FONT)\n",
    "        label.pack(pady=50,padx=50)\n",
    "\n",
    "        button = tk.Button(self, text=\"November,2019\",\n",
    "                            command=lambda: controller.show_frame(PageOne))\n",
    "        button.pack(side='left',pady=10,padx=10)\n",
    "\n",
    "        button2 = tk.Button(self, text=\"December,2019\",\n",
    "                            command=lambda: controller.show_frame(PageTwo))\n",
    "        button2.pack(side='left',pady=10,padx=10)\n",
    "        \n",
    "        \n",
    "\n",
    "\n",
    "class PageOne(tk.Frame):\n",
    "\n",
    "    def __init__(self, parent, controller):\n",
    "        tk.Frame.__init__(self, parent)\n",
    "        updateExcelOne('RTB','november')\n",
    "        updateExcelOne('VAT','november')\n",
    "        updateExcelOne('WAF','november')\n",
    "        updateExcelOne('AutoOnboarding','november')\n",
    "        wb = openpyxl.load_workbook(\"C:\\\\Users\\\\aquibf632\\\\Desktop\\\\genesisOne\\\\november.xlsx\")\n",
    "        sheet = wb.get_sheet_by_name(\"Sheet1\")\n",
    "        name=[]\n",
    "        iteration = []\n",
    "        for i in range(2,sheet.max_row+1):\n",
    "            name.append(sheet.cell(row=i,column=1).value)\n",
    "            iteration.append(sheet.cell(row=i,column=2).value)\n",
    "        count = 0\n",
    "        for i in iteration:\n",
    "            if (int(i)>0):\n",
    "                count = count + 1\n",
    "        if (count == 0):\n",
    "            label = tk.Label(self, text=\"Nothing there to show!\", font=LARGE_FONT)\n",
    "            label.pack(pady=50,padx=50)\n",
    "        else:\n",
    "            f = Figure(figsize=(5,5),dpi=100)\n",
    "            a = f.add_subplot(111)\n",
    "            a.bar(name,iteration)\n",
    "\n",
    "            canvas = FigureCanvasTkAgg(f , self)\n",
    "            canvas.get_tk_widget().pack(side='bottom',fill='both', expand=True)\n",
    "\n",
    "        button1 = tk.Button(self, text=\"Home\",\n",
    "                        command=lambda: controller.show_frame(StartPage))\n",
    "        button1.pack(side='left',pady=10,padx=10)\n",
    "\n",
    "class PageTwo(tk.Frame):\n",
    "\n",
    "    def __init__(self, parent, controller):\n",
    "        tk.Frame.__init__(self, parent)\n",
    "        updateExcelOne('RTB','december')\n",
    "        updateExcelOne('VAT','december')\n",
    "        updateExcelOne('WAF','december')\n",
    "        updateExcelOne('AutoOnboarding','december')\n",
    "        wb = openpyxl.load_workbook(\"C:\\\\Users\\\\aquibf632\\\\Desktop\\\\genesisOne\\\\december.xlsx\")\n",
    "        sheet = wb.get_sheet_by_name(\"Sheet1\")\n",
    "        name=[]\n",
    "        iteration = []\n",
    "        for i in range(2,sheet.max_row+1):\n",
    "            name.append(sheet.cell(row=i,column=1).value)\n",
    "            iteration.append(sheet.cell(row=i,column=2).value)\n",
    "        count  = 0\n",
    "        for i in iteration:\n",
    "            if (int(i)>0):\n",
    "                count = count + 1\n",
    "        if (count == 0):\n",
    "            label = tk.Label(self, text=\"Nothing there to show!\", font=LARGE_FONT)\n",
    "            label.pack(pady=50,padx=50)\n",
    "        else :\n",
    "            f = Figure(figsize=(5,5),dpi=100)\n",
    "            a = f.add_subplot(111)\n",
    "            a.bar(name,iteration)\n",
    "\n",
    "            canvas = FigureCanvasTkAgg(f , self)\n",
    "            canvas.get_tk_widget().pack(side='bottom', fill='both', expand=True)\n",
    "\n",
    "        button1 = tk.Button(self, text=\" Home\",\n",
    "                             command=lambda: controller.show_frame(StartPage))\n",
    "        button1.pack(side='left',pady=10,padx=10)\n",
    "\n",
    "\n",
    "app = SeaofBTCapp()\n",
    "app.mainloop()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
